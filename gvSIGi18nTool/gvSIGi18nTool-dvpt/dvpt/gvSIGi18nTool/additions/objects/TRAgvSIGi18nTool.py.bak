# -*- coding: utf-8 -*-
#
# File: TRAgvSIGi18nTool.py
#
# Copyright (c) 2008,2009,2010 by Model Driven Development sl and Antonio Carrasco Valero
#
# GNU General Public License (GPL)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# Authors: 
# Model Driven Development sl  Valencia (Spain) www.ModelDD.org 
# Antonio Carrasco Valero                       carrasco@ModelDD.org
#

__author__ = """Model Driven Development sl <ModelDDvlPlone@ModelDD.org>,
Antonio Carrasco Valero <carrasco@ModelDD.org>"""
__docformat__ = 'plaintext'

import os
import sys
import traceback

# Zope
from OFS import SimpleItem
from OFS.PropertyManager import PropertyManager
from Products.PageTemplates.PageTemplateFile import PageTemplateFile
from AccessControl import ClassSecurityInfo

from AccessControl.Permissions                 import access_contents_information   as perm_AccessContentsInformation

from time import time

from DateTime import DateTime




from Products.CMFCore                    import permissions
from Products.CMFCore.utils              import getToolByName, UniqueObject
from Products.CMFCore.ActionProviderBase import ActionProviderBase




from Acquisition  import aq_inner, aq_parent,aq_get



"""Tool permissions to be set upon instantiation of the tool,  not restricting the access of anonymous users.

"""         
cTRAgvSIGi18nToolPermissions = [                                                                                                                                     
    { 'permission': permissions.ManagePortal,         'acquire': True,  'roles': [              'Authenticated', ], },                             
    { 'permission': permissions.ManageProperties,     'acquire': True,  'roles': [              'Authenticated', ], }, 
    { 'permission': permissions.AddPortalContent,     'acquire': True,  'roles': [              'Authenticated', ], }, 
    { 'permission': permissions.DeleteObjects,        'acquire': True,  'roles': [              'Authenticated', ], }, 
    { 'permission': permissions.ModifyPortalContent,  'acquire': True,  'roles': [              'Authenticated', ], }, 
    { 'permission': permissions.View,                 'acquire': True,  'roles': [ 'Anonymous', 'Authenticated', ], },  
    { 'permission': perm_AccessContentsInformation,   'acquire': True,  'roles': [ 'Anonymous', 'Authenticated', ], },  
]








# #######################################################
# #######################################################

   










class TRAgvSIGi18nTool( UniqueObject, PropertyManager, SimpleItem.SimpleItem, ActionProviderBase):
    """Facade singleton object exposing services layer to the presentation layer, and delegating into a number of specialized, collaborating role realizations..
    
    """

              
        
    
    "The TRAgvSIGi18nTool"

    meta_type = 'TRAgvSIGi18nTool'

    id = TRAgvSIGi18nTool_Inicializacion_Constants.cTRAgvSIGi18nToolId

    manage_options = PropertyManager.manage_options + \
                     SimpleItem.SimpleItem.manage_options + (
    	{'label': 'View', 'action': 'index_html',},
    )

    _properties = (
        {'id':'title', 'type':'string', 'mode':'w'},
    )

    # Standard security settings
    security = ClassSecurityInfo()


    security.declareProtected('Manage properties', 'index_html')
    index_html = PageTemplateFile('skins/index_html', globals())

    


    

 

    # #######################################################
    # #######################################################
    """Globals
    
    """
    # #######################################################
    
       
    
    
    
        
        


    security.declareProtected( permissions.View, 'fSecondsNow')
    def fSecondsNow(self):   
    
        return TRAgvSIGi18nToolSupport.fSecondsNow()
    
    
        
    security.declareProtected( permissions.View, 'fMillisecondsNow')
    def fMillisecondsNow(self):   
        return TRAgvSIGi18nToolSupport.fMillisecondsNow()
    
    
    
    security.declareProtected( permissions.View, 'fDateTimeNow')
    def fDateTimeNow(self):   
        return TRAgvSIGi18nToolSupport.fDateTimeNow()
    
    
    
    
    security.declareProtected( permissions.View, 'fDateTimeAfterSeconds')
    def fDateTimeAfterSeconds( self, theDateTime, theSeconds):
        return TRAgvSIGi18nToolSupport.fDateTimeAfterSeconds( theDateTime, theSeconds)
   
    
             
        
    security.declarePublic( 'fMillisecondsToDateTime')
    def fMillisecondsToDateTime( self, theMilliseconds):
        return TRAgvSIGi18nToolSupport.fMillisecondsToDateTime( theMilliseconds)
        
        
         
    
    
       
    
    # #######################################################
    # #######################################################
    
        
 
        


    security.declarePublic('manage_afterAdd')
    def manage_afterAdd(self,item,container):
        """Lazy Initialization of the tool.
        
        """        
        self.pSetPermissions()
                
        return self
    

    
    security.declarePrivate( 'pSetPermissions')
    def pSetPermissions(self):
        """Set tool permissions upon instantiation of the tool, according to a specification ( usually not restricting the access of anonymous users).
        
        """         
        for unaPermissionSpec in cTRAgvSIGi18nToolPermissions:
            unaPermission = unaPermissionSpec[ 'permission']
            unAcquire     = unaPermissionSpec[ 'acquire'] 
            unosRoles     = unaPermissionSpec[ 'roles']
            
            if unaPermission:
                self.manage_permission( unaPermission, roles=unosRoles, acquire=unAcquire)
        
        return self
        
         

    
    
    
    
    # ######################################
    """Portal access.
    
    
    """    
    
          
    security.declarePrivate('fPortalRoot')
    def fPortalRoot(self):
        aPortalTool = getToolByName( self, 'portal_url')
        unPortal = aPortalTool.getPortalObject()
        return unPortal       
    
    
    
    
    security.declarePrivate('fPortalURL')
    def fPortalURL(self, ):

        unPortalURLTool = getToolByName( self, 'portal_url', None)
        if not unPortalURLTool:
            return ''
        
        unPortalURL = ''
        try:
            unPortalURL = unPortalURLTool()
        except: 
            None
        if not unPortalURL:
            return ''
        
        return unPortalURL
        
    
    
    
    
    
    
    
    
        
        
    
    
    

# ####################################################
"""Constructor methods, only used when adding class to objectManager.

"""

def manage_addAction(self, REQUEST=None):
    "Add tool instance to parent ObjectManager"
    id = TRAgvSIGi18nTool.id
    self._setObject(id, TRAgvSIGi18nTool())
    if REQUEST is not None:
        return self.manage_main(self, REQUEST)

constructors = (manage_addAction,)



